provider "aws" {
  alias  = "us_east1"
  region = "us-east-1"
 access_key = ""
 secret_key = ""
}

provider "aws" {
  alias  = "us_east2"
  region = "us-east-2"
  access_key = ""
  secret_key = ""
}

resource "aws_vpc" "vpc1" {
  provider = "aws.us_east1"
  cidr_block = "10.0.0.0/16"
}

resource "aws_vpc" "vpc2" {
  provider = "aws.us_east2"
  cidr_block = "10.1.0.0/16"
}

resource "aws_internet_gateway" "igw1" {
  provider = "aws.us_east1"
  vpc_id = aws_vpc.vpc1.id
}

resource "aws_internet_gateway" "igw2" {
  provider = "aws.us_east2"
  vpc_id = aws_vpc.vpc2.id
}

resource "aws_eip" "eip_nat1" { 
provider = "aws.us_east1" 
vpc = true 
} 
resource "aws_eip" "eip_nat2" { 
provider = "aws.us_east2" 
vpc = true
 } 
resource "aws_nat_gateway" "nat_gw1" { 
provider = "aws.us_east1" 
allocation_id = aws_eip.eip_nat1.id 
subnet_id = aws_subnet.public_subnet1.id
 } 
resource "aws_nat_gateway" "nat_gw2" { 
provider = "aws.us_east2" 
allocation_id = aws_eip.eip_nat2.id 
subnet_id = aws_subnet.public_subnet2.id
 }


resource "aws_route_table" "public_rt1" {
  provider = "aws.us_east1"
  vpc_id = aws_vpc.vpc1.id
}

resource "aws_route_table" "private_rt1" {
  provider = "aws.us_east1"
  vpc_id = aws_vpc.vpc1.id
}

resource "aws_route" "public_route1" {
  provider = "aws.us_east1"
  route_table_id = aws_route_table.public_rt1.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.igw1.id
}
resource "aws_route" "private_route1" {
  provider = "aws.us_east1"
  route_table_id = aws_route_table.private_rt1.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id = aws_nat_gateway.nat_gw1.id
}

resource "aws_route_table" "public_rt2" {
  provider = "aws.us_east2"
  vpc_id = aws_vpc.vpc2.id
}

resource "aws_route_table" "private_rt2" {
  provider = "aws.us_east2"
  vpc_id = aws_vpc.vpc2.id
}

resource "aws_route" "public_route2" {
  provider = "aws.us_east2"
  route_table_id = aws_route_table.public_rt2.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.igw2.id
}
resource "aws_route" "private_route2" {
  provider = "aws.us_east2"
  route_table_id = aws_route_table.private_rt2.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id = aws_nat_gateway.nat_gw2.id
}



resource "aws_subnet" "public_subnet1" {
  provider = "aws.us_east1"
  vpc_id = aws_vpc.vpc1.id
  cidr_block = "10.0.1.0/24"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "private_subnet1" {
  provider = "aws.us_east1"
  vpc_id = aws_vpc.vpc1.id
  cidr_block = "10.0.2.0/24"
}

resource "aws_subnet" "public_subnet2" {
  provider = "aws.us_east2"
  vpc_id = aws_vpc.vpc2.id
  cidr_block = "10.1.1.0/24"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "private_subnet2" {
  provider = "aws.us_east2"
  vpc_id = aws_vpc.vpc2.id
  cidr_block = "10.1.2.0/24"
}

resource "aws_route_table_association" "public_assoc1" {
  provider = "aws.us_east1"
  subnet_id = aws_subnet.public_subnet1.id
  route_table_id = aws_route_table.public_rt1.id
}

resource "aws_route_table_association" "private_assoc1" {
  provider = "aws.us_east1"
  subnet_id = aws_subnet.private_subnet1.id
  route_table_id = aws_route_table.private_rt1.id
}

resource "aws_route_table_association" "public_assoc2" {
  provider = "aws.us_east2"
  subnet_id = aws_subnet.public_subnet2.id
  route_table_id = aws_route_table.public_rt2.id
}

resource "aws_route_table_association" "private_assoc2" {
  provider = "aws.us_east2"
  subnet_id = aws_subnet.private_subnet2.id
  route_table_id = aws_route_table.private_rt2.id
}

resource "aws_security_group" "public_sg1" {
  provider = "aws.us_east1"
  vpc_id = aws_vpc.vpc1.id
  name = "public_sg1"
  ingress {
    from_port = 443
    to_port = 443
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

}

resource "aws_security_group" "private_sg1" {
  provider = "aws.us_east1"
  vpc_id = aws_vpc.vpc1.id
  name = "private_sg1"

  ingress {
    from_port = 3306
    to_port = 3306
    protocol = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "public_sg2" {
  provider = "aws.us_east2"
  vpc_id = aws_vpc.vpc2.id
  name = "public_sg2"
   ingress {
    from_port = 443
    to_port = 443
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "private_sg2" {
  provider = "aws.us_east2"
  vpc_id = aws_vpc.vpc2.id
  name = "private_sg2"

  ingress {
    from_port = 3306
    to_port = 3306
    protocol = "tcp"
    cidr_blocks = ["10.1.0.0/16"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "public_instance1" {
  provider = "aws.us_east1"
  ami = "ami-04b4f1a9cf54c11d0" # Replace with your preferred AMI ID
  instance_type = "t2.micro"
  subnet_id = aws_subnet.public_subnet1.id
  associate_public_ip_address = true
  security_groups = [aws_security_group.public_sg1.id]

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y apache2
              systemctl start apache2
              systemctl enable apache2
              EOF
}

resource "aws_instance" "private_instance1" {
  provider = "aws.us_east1"
  ami = "ami-04b4f1a9cf54c11d0" # Replace with your preferred AMI ID
  instance_type = "t2.micro"
  subnet_id = aws_subnet.private_subnet1.id
  security_groups = [aws_security_group.private_sg1.id]

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y mysql-server
              systemctl start mysql
              systemctl enable mysql
              EOF
}

resource "aws_instance" "public_instance2" {
  provider = "aws.us_east2"
  ami = "ami-0cb91c7de36eed2cb" # Replace with your preferred AMI ID
  instance_type = "t2.micro"
  subnet_id = aws_subnet.public_subnet2.id
  associate_public_ip_address = true
  security_groups = [aws_security_group.public_sg2.id]

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y apache2
              systemctl start apache2
              systemctl enable apache2
              EOF
}

resource "aws_instance" "private_instance2" {
  provider = "aws.us_east2"
  ami = "ami-0cb91c7de36eed2cb" # Replace with your preferred AMI ID
  instance_type = "t2.micro"
  subnet_id = aws_subnet.private_subnet2.id
  security_groups = [aws_security_group.private_sg2.id]

  user_data = <<-EOF
              #!/bin/bash
              apt-get update
              apt-get install -y mysql-server
              systemctl start mysql
              systemctl enable mysql
              EOF
}
